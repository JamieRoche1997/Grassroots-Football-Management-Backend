swagger: '2.0'
info:
  title: Grassroots Football Management API
  description: API Gateway for Grassroots Football Management microservices
  version: 1.0.0
host: gfm-1ykrsotxghm8m.apigateway.grassroots-football-management.cloud.goog
x-google-endpoints:
- name: gfm-1ykrsotxghm8m.apigateway.grassroots-football-management.cloud.goog
  allowCors: True
schemes:
  - https
paths:
  # Authentication Microservice Routes
  /signup:
    post:
      x-google-backend:
        address: https://microservice-authentication-180320540339.europe-west2.run.app/signup  
      summary: Register a new user
      description: Register a new user with email, password, and name
      operationId: registerUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: User registration data
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
              name:
                type: string
              role:
                type: string
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Invalid input or email already exists
        '500':
          description: Internal server error

  /signin:
    post:
      x-google-backend:
        address: https://microservice-authentication-180320540339.europe-west2.run.app/signin  
      summary: Sign in a user
      description: Authenticate a user with an ID token
      operationId: signInUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: User sign-in data
          required: true
          schema:
            type: object
            properties:
              idToken:
                type: string
      responses:
        '200':
          description: User signed in successfully
        '400':
          description: Invalid input
        '401':
          description: Invalid or expired ID token
        '500':
          description: Internal server error

  # User Management Microservice Routes
  /user/create:
    post:
      x-google-backend:
        address: https://microservice-user-management-180320540339.europe-west2.run.app/user/create
      summary: Create a new user in Firestore
      description: Create a new user document in Firestore with email, name, and role
      operationId: createUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: User creation data
          required: true
          schema:
            type: object
            properties:
              uid:
                type: string
              email:
                type: string
              name:
                type: string
              role:
                type: string
              clubName:
                type: string
              ageGroup:
                type: string
              division:
                type: string
              userRegistered:
                type: boolean
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid input or user already exists
        '500':
          description: Internal server error
  
  /user/update:
    post:
      x-google-backend:
        address: https://microservice-user-management-180320540339.europe-west2.run.app/user/update  
      summary: Update a user's profile
      description: Update a user's profile in Firestore
      operationId: updateUserProfile
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: User profile data to update
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              name:
                type: string
      responses:
        '200':
          description: User profile updated successfully
        '400':
          description: Invalid input
        '500':
          description: Internal server error

  /user/check:
    get:
      x-google-backend:
        address: https://microservice-user-management-180320540339.europe-west2.run.app/user/check  
      summary: Check if a user exists
      description: Check if a user exists in Firestore by email
      operationId: checkUserExists
      produces:
        - application/json
      parameters:
        - in: query
          name: email
          description: The email of the user to check
          required: true
          type: string
      responses:
        '200':
          description: Successful response indicating whether the user exists
          schema:
            type: object
            properties:
              exists:
                type: boolean
              message:
                type: string
        '400':
          description: Missing or invalid email parameter
        '500':
          description: Internal server error

  /user/club-info:
    get:
      x-google-backend:
        address: https://microservice-user-management-180320540339.europe-west2.run.app/user/club-info 
      summary: Retrieve user's club information
      description: Retrieve the club information of a user in Firestore by email
      operationId: getUserClubInfo
      produces:
        - application/json
      parameters:
        - in: query
          name: email
          description: The email of the user to check
          required: true
          type: string
      responses:
        '200':
          description: Successful response indicating the user's club information
          schema:
            type: object
            properties:
              clubName:
                type: string
              ageGroup:
                type: string
              division:
                type: string
        '400':
          description: Missing or invalid email parameter
        '500':
          description: Internal server error

  /user/update-match-event:
    post:
      x-google-backend:
        address: https://microservice-user-management-180320540339.europe-west2.run.app/user/update-match-event
      summary: Append a match event count to a player's document
      operationId: updateUserMatchEvent
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Match event details
          required: true
          schema:
            type: object
            required:
              - playerName
              - type
            properties:
              playerName:
                type: string
                description: The player's unique identifier
              type:
                type: string
                enum: [goal, assist, injury, yellowCard, redCard]
                description: Type of match event
      responses:
        '200':
          description: Match event recorded successfully
        '400':
          description: Missing or invalid request data
        '404':
          description: Player not found
        '500':
          description: Internal server error


  # Team Management Microservice Routes
  /club/create-join:
    post:
      x-google-backend:
        address: https://microservice-team-management-180320540339.europe-west2.run.app/club/create-join
      summary: Create or join a club
      operationId: createOrJoinClub
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              clubName:
                type: string
              coachEmail:
                type: string
              ageGroups:
                type: array
                items:
                  type: string
              divisions:
                type: array
                items:
                  type: string
              county:
                type: string
      responses:
        '201':
          description: New club created
        '200':
          description: Coach added to existing club
        '400':
          description: Invalid input
        '500':
          description: Internal server error

  /club/search:
    get:
      x-google-backend:
        address: https://microservice-team-management-180320540339.europe-west2.run.app/club/search
      summary: Search for clubs
      operationId: searchClubs
      produces:
        - application/json
      parameters:
        - in: query
          name: clubName
          type: string
          description: Club name to search
          required: false
        - in: query
          name: county
          type: string
          description: County to filter by
          required: false
        - in: query
          name: ageGroup
          type: string
          description: Age group to filter by
          required: false
        - in: query
          name: division
          type: string
          description: Division to filter by
          required: false
      responses:
        '200':
          description: List of clubs
        '500':
          description: Internal server error

  /club/join-request:
    post:
      x-google-backend:
        address: https://microservice-team-management-180320540339.europe-west2.run.app/club/join-request
      summary: Submit a join request
      operationId: submitJoinRequest
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              playerEmail:
                type: string
              clubName:
                type: string
              ageGroup:
                type: string
              division:
                type: string
      responses:
        '201':
          description: Join request submitted
        '400':
          description: Invalid input
        '500':
          description: Internal server error

  /club/requests:
    get:
      x-google-backend:
        address: https://microservice-team-management-180320540339.europe-west2.run.app/club/requests
      summary: Retrieve pending join requests
      operationId: getJoinRequests
      produces:
        - application/json
      parameters:
        - in: query
          name: clubName
          type: string
          description: The club name to retrieve join requests for
          required: true
        - in: query
          name: ageGroup
          type: string
          description: The age group to filter join requests by
          required: false
        - in: query
          name: division
          type: string
          description: The division to filter join requests by
          required: false
      responses:
        '200':
          description: List of pending join requests
        '400':
          description: Missing or invalid query parameters
        '500':
          description: Internal server error

  /club/requests/approve:
    post:
      x-google-backend:
        address: https://microservice-team-management-180320540339.europe-west2.run.app/club/requests/approve
      summary: Approve a player's join request
      operationId: approveJoinRequest
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              playerEmail:
                type: string
                description: Email of the player to approve
              clubName:
                type: string
                description: The club name where the player requested to join
              ageGroup:
                type: string
                description: The age group of the player
              division:
                type: string
                description: The division of the player
      responses:
        '200':
          description: Player added to the club
        '400':
          description: Missing or invalid parameters
        '500':
          description: Internal server error

  /club/requests/reject:
    post:
      x-google-backend:
        address: https://microservice-team-management-180320540339.europe-west2.run.app/club/requests/reject
      summary: Reject a player's join request
      operationId: rejectJoinRequest
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              playerEmail:
                type: string
                description: Email of the player to reject
              clubName:
                type: string
                description: The club name where the player requested to join
              ageGroup:
                type: string
                description: The age group of the player
              division: 
                type: string
                description: The division of the player
      responses:
        '200':
          description: Join request rejected
        '400':
          description: Missing or invalid parameters
        '500':
          description: Internal server error

  /club/players:
    get:
      x-google-backend:
        address: https://microservice-team-management-180320540339.europe-west2.run.app/club/players
      summary: Retrieve players for a specific club, age group, and division
      operationId: getPlayers
      produces:
        - application/json
      parameters:
        - in: query
          name: clubName
          type: string
          description: The club name to retrieve players for
          required: true
        - in: query
          name: ageGroup
          type: string
          description: The age group to filter players by
          required: true
        - in: query
          name: division
          type: string
          description: The division to filter players by
          required: true
      responses:
        '200':
          description: List of players for the specified criteria
        '400':
          description: Missing or invalid query parameters
        '500':
          description: Internal server error

  /club/players/remove:
    post:
      x-google-backend:
        address: https://microservice-team-management-180320540339.europe-west2.run.app/club/players/remove
      summary: Remove players from a club's roster
      operationId: removePlayers
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: JSON object containing club details and player emails to remove
          required: true
          schema:
            type: object
            properties:
              clubName:
                type: string
                description: The name of the club
                example: "Cobh Ramblers"
              ageGroup:
                type: string
                description: The age group of the players
                example: "Professional"
              division:
                type: string
                description: The division of the players
                example: "Division Premier"
              playerEmails:
                type: array
                items:
                  type: string
                description: List of player emails to remove from the club
                example: ["player1@email.com", "player2@email.com"]
      responses:
        '200':
          description: Players removed successfully
        '400':
          description: Missing or invalid parameters
        '500':
          description: Internal server error

  # Schedule Management Microservice Routes
  /schedule/matches:
    get:
      x-google-backend:
        address: https://microservice-schedule-management-180320540339.europe-west2.run.app/schedule/matches
      summary: Retrieve scheduled matches
      operationId: getScheduledMatches
      consumes:
        - application/json
      produces:
        - application/json
      description: Retrieve scheduled matches for a specific month, age group, and division.
      parameters:
        - name: month
          in: query
          description: The month to fetch matches for (format yyyy-MM).
          required: true
          type: string
        - name: clubName
          in: query
          description: The club name to filter matches by.
          required: true
          type: string
        - name: ageGroup
          in: query
          description: The age group to filter matches by.
          required: true
          type: string
        - name: division
          in: query
          description: The division to filter matches by.
          required: true
          type: string
      responses:
        '200':
          description: List of matches retrieved successfully.
          schema:
            type: array
            items:
              type: object
              properties:
                matchId:
                  type: string
                homeTeam:
                  type: string
                awayTeam:
                  type: string
                ageGroup:
                  type: string
                division:
                  type: string
                date:
                  type: string
                  format: date-time
                result:
                  type: object
                  properties:
                    homeScore:
                      type: integer
                    awayScore:
                      type: integer
        '400':
          description: Missing or invalid query parameters.
        '500':
          description: Internal server error.

  /schedule/add-fixture:
    post:
      x-google-backend:
        address: https://microservice-schedule-management-180320540339.europe-west2.run.app/schedule/add-fixture
      summary: Add a new fixture to the schedule.
      operationId: addFixture
      consumes:
        - application/json
      produces:
        - application/json
      description: Add a new match fixture to the schedule with details such as teams, age group, and date.
      parameters:
        - in: body
          name: body
          description: The details of the fixture to be added.
          required: true
          schema:
            type: object
            required:
              - homeTeam
              - awayTeam
              - ageGroup
              - division
              - date
              - createdBy
            properties:
              homeTeam:
                type: string
                description: The name of the home team.
              awayTeam:
                type: string
                description: The name of the away team.
              ageGroup:
                type: string
                description: The age group for the match.
              division:
                type: string
                description: The division for the match.
              date:
                type: string
                format: date-time
                description: The scheduled date and time of the match.
              createdBy:
                type: string
                description: The email of the user creating the fixture.
      responses:
        '201':
          description: Fixture added successfully.
        '400':
          description: Missing or invalid request data.
        '500':
          description: Internal server error.

  /schedule/update-result:
    put:
      x-google-backend:
        address: https://microservice-schedule-management-180320540339.europe-west2.run.app/schedule/update-result
      summary: Update a match result and events.
      operationId: updateMatchResult
      consumes:
        - application/json
      produces:
        - application/json
      description: Update the result of a scheduled match with scores and events.
      parameters:
        - in: body
          name: body
          description: The match result and events data to be updated.
          required: true
          schema:
            type: object
            required:
              - matchId
              - homeScore
              - awayScore
            properties:
              matchId:
                type: string
                description: The unique ID of the match to be updated.
              homeScore:
                type: integer
                description: The score for the home team.
              awayScore:
                type: integer
                description: The score for the away team.
              events:
                type: array
                description: List of match events.
                items:
                  type: object
                  properties:
                    type:
                      type: string
                      enum: [goal, assist, injury, yellowCard, redCard]
                      description: The type of event.
                    playerName:
                      type: string
                      description: The name of the player involved in the event.
                    minute:
                      type: string
                      description: The minute the event occurred.
                    description:
                      type: string
                      description: Additional event details.
      responses:
        '200':
          description: Match result and events updated successfully.
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Match result and events updated successfully"
        '400':
          description: Missing or invalid request data.
          schema:
            type: object
            properties:
              error:
                type: string
                example: "matchId, homeScore, and awayScore are required"
        '404':
          description: Match not found.
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Match not found"
        '500':
          description: Internal server error.
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Internal server error"

  /schedule/trainings:
    get:
      x-google-backend:
        address: https://microservice-schedule-management-180320540339.europe-west2.run.app/schedule/trainings
      summary: Retrieve scheduled training sessions
      operationId: getScheduledTrainings
      consumes:
        - application/json
      produces:
        - application/json
      description: Retrieve scheduled training sessions for a specific month, age group, and division.
      parameters:
        - name: month
          in: query
          description: The month to fetch training sessions for (format yyyy-MM).
          required: true
          type: string
        - name: clubName
          in: query
          description: The club name to filter training sessions by.
          required: true
          type: string
        - name: ageGroup
          in: query
          description: The age group to filter training sessions by.
          required: true
          type: string
        - name: division
          in: query
          description: The division to filter training sessions by.
          required: true
          type: string
      responses:
        '200':
          description: List of training sessions retrieved successfully.
          schema:
            type: array
            items:
              type: object
              properties:
                trainingId:
                  type: string
                ageGroup:
                  type: string
                division:
                  type: string
                date:
                  type: string
                  format: date-time
                location:
                  type: string
                notes:
                  type: string
                createdBy:
                  type: string
        '400':
          description: Missing or invalid query parameters.
        '500':
          description: Internal server error.

  /schedule/add-training:
    post:
      x-google-backend:
        address: https://microservice-schedule-management-180320540339.europe-west2.run.app/schedule/add-training
      summary: Add a new training session to the schedule
      operationId: addTrainingSession
      consumes:
        - application/json
      produces:
        - application/json
      description: Add a new training session to the schedule with details such as age group, division, date, and location.
      parameters:
        - in: body
          name: body
          description: The details of the training session to be added.
          required: true
          schema:
            type: object
            required:
              - ageGroup
              - division
              - date
              - location
              - createdBy
            properties:
              ageGroup:
                type: string
                description: The age group for the training session.
              division:
                type: string
                description: The division for the training session.
              date:
                type: string
                format: date-time
                description: The scheduled date and time of the training session.
              location:
                type: string
                description: The location where the training session will be held.
              notes:
                type: string
                description: Any additional notes about the training session.
              createdBy:
                type: string
                description: The email of the user creating the training session.
      responses:
        '201':
          description: Training session added successfully.
        '400':
          description: Missing or invalid request data.
        '500':
          description: Internal server error.

  /schedule/save-match-data:
    post:
      x-google-backend:
        address: https://microservice-schedule-management-180320540339.europe-west2.run.app/schedule/save-match-data
      summary: Save or update tactics for a match
      description: Save or update tactics, formation, strategy notes, and team lineups in the matches collection.
      operationId: saveMatchTactics
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Match tactics data to be saved
          required: true
          schema:
            type: object
            required:
              - matchId
              - formation
            properties:
              matchId:
                type: string
                description: The unique identifier for the match.
              formation:
                type: string
                description: The team's selected formation.
                example: "4-4-2"
              strategyNotes:
                type: string
                description: Coach's strategic notes for the match.
                example: "Play high press in the first half."
              homeTeamLineup:
                type: object
                description: The lineup for the home team (position to player ID mapping).
                additionalProperties:
                  type: string
                example:
                  GK: "player_uid_1"
                  RB: "player_uid_2"
                  CB: "player_uid_3"
              awayTeamLineup:
                type: object
                description: The lineup for the away team (position to player ID mapping).
                additionalProperties:
                  type: string
                example:
                  GK: "player_uid_4"
                  LB: "player_uid_5"
                  CB: "player_uid_6"
      responses:
        '200':
          description: Tactics saved successfully.
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Tactics saved successfully"
        '400':
          description: Missing or invalid request data.
          schema:
            type: object
            properties:
              error:
                type: string
                example: "matchId and formation are required"
        '404':
          description: Match not found.
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Match not found"
        '500':
          description: Internal server error.
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Internal server error"

  # Player Ratings Microservice Routes
  /player/submit-rating:
    post:
      x-google-backend:
        address: https://microservice-player-ratings-180320540339.europe-west2.run.app/player/submit-rating
      summary: Submit a new player rating
      description: Submit a new player rating with overall performance and skill ratings.
      operationId: submitPlayerRating
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Player rating data to be submitted.
          required: true
          schema:
            type: object
            required:
              - playerEmail
              - playerName
              - clubName
              - ageGroup
              - division
              - matchId
              - ratedBy
              - overallPerformance
              - passingAccuracy
              - shootingAccuracy
              - defensiveWorkRate
              - attackingContributions
              - teamwork
              - skill
              - attitude
            properties:
              playerEmail:
                type: string
              playerName:
                type: string
              clubName:
                type: string
              ageGroup:
                type: string
              division:
                type: string
              matchId:
                type: string
              ratedBy:
                type: string
              overallPerformance:
                type: integer
              passingAccuracy:
                type: integer
              shootingAccuracy:
                type: integer
              defensiveWorkRate:
                type: integer
              attackingContributions:
                type: integer
              teamwork:
                type: integer
              skill:  
                type: integer
              attitude:  
                type: integer
      responses:
        '201':
          description: Player rating submitted successfully.
        '400':
          description: Missing or invalid request data.
        '500':
          description: Internal server error.

  /player/get-ratings:
    get:
      x-google-backend:
        address: https://microservice-player-ratings-180320540339.europe-west2.run.app/player/get-ratings
      summary: Retrieve player ratings
      description: Retrieves ratings for all players in a given club.
      operationId: getPlayerRatings
      produces:
        - application/json
      parameters:
        - in: query
          name: clubName
          description: The club name to filter player ratings by.
          required: true
          type: string
        - in: query
          name: ageGroup
          description: The age group to filter player ratings by.
          required: true
          type: string
        - in: query
          name: division
          description: The division to filter player ratings by.
          required: true
          type: string
      responses:
        '200':
          description: List of player ratings retrieved successfully.
          schema:
            type: array
            items:
              type: object
              properties:
                playerEmail:
                  type: string
                  description: The email of the player.
                playerName:
                  type: string
                  description: The name of the player.
                averageRating:
                  type: number
                  format: float
                  description: The player's average rating.
                totalVotes:
                  type: integer
                  description: The total number of votes received.
        '400':
          description: Missing or invalid query parameters.
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Missing clubName, ageGroup, or division"
        '500':
          description: Internal server error.
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Internal server error"

  # Match Ratings Microservice Routes
  /match/submit-rating:
    post:
      x-google-backend:
        address: https://microservice-match-ratings-180320540339.europe-west2.run.app/match/submit-rating
      summary: Submit a new match rating
      description: Allows users to submit ratings for a match based on overall quality, refereeing, and atmosphere.
      operationId: submitMatchRating
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Match rating data to be submitted.
          required: true
          schema:
            type: object
            required:
              - matchId
              - clubName
              - ageGroup
              - division
              - ratedBy
              - overallQuality
              - refereeingPerformance
              - homeTeamPerformance
              - awayTeamPerformance
              - sportsmanship
              - crowdAtmosphere
            properties:
              matchId:
                type: string
                description: The match ID for which the rating is given.
              clubName:
                type: string
                description: The club name associated with the match.
              ageGroup:
                type: string
                description: The age group of the match.
              division:
                type: string
                description: The division of the match.
              ratedBy:
                type: string
                description: The email of the user submitting the rating.
              overallQuality:
                type: integer
                description: Overall match quality rating (1-10).
                minimum: 1
                maximum: 10
              refereeingPerformance:
                type: integer
                description: Referee performance rating (1-10).
                minimum: 1
                maximum: 10
              homeTeamPerformance:
                type: integer
                description: Home team performance rating (1-10).
                minimum: 1
                maximum: 10
              awayTeamPerformance:
                type: integer
                description: Away team performance rating (1-10).
                minimum: 1
                maximum: 10
              sportsmanship:
                type: integer
                description: Sportsmanship rating (1-10).
                minimum: 1
                maximum: 10
              crowdAtmosphere:
                type: integer
                description: Crowd atmosphere rating (1-10).
                minimum: 1
                maximum: 10
      responses:
        '201':
          description: Match rating submitted successfully.
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Match rating submitted successfully"
        '400':
          description: Missing or invalid request data.
          schema:
            type: object
            properties:
              error:
                type: string
                example: "matchId, ratedBy, and ratings are required"
        '500':
          description: Internal server error.
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Internal server error"

  /match/get-ratings:
    get:
      x-google-backend:
        address: https://microservice-match-ratings-180320540339.europe-west2.run.app/match/get-ratings
      summary: Retrieve match ratings
      description: Retrieves ratings for all matches in a given club, age group, and division.
      operationId: getMatchRatings
      produces:
        - application/json
      parameters:
        - in: query
          name: clubName
          description: The club name to filter match ratings by.
          required: true
          type: string
        - in: query
          name: ageGroup
          description: The age group to filter match ratings by.
          required: true
          type: string
        - in: query
          name: division
          description: The division to filter match ratings by.
          required: true
          type: string
      responses:
        '200':
          description: List of match ratings retrieved successfully.
          schema:
            type: array
            items:
              type: object
              properties:
                matchId:
                  type: string
                  description: The unique identifier of the match.
                averageRating:
                  type: number
                  format: float
                  description: The average match rating.
                totalVotes:
                  type: integer
                  description: The total number of votes received.
        '400':
          description: Missing or invalid query parameters.
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Missing clubName, ageGroup, or division"
        '500':
          description: Internal server error.
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Internal server error"

  # Carpool Microservice Routes
  /carpool/offer:
    post:
      x-google-backend:
        address: https://microservice-carpool-180320540339.europe-west2.run.app/carpool/offer
      summary: Offer a ride for a specific match
      description: Allows a user to offer a carpool ride for a match.
      operationId: offerRide
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Ride details
          required: true
          schema:
            type: object
            required:
              - id
              - driverName
              - seats
              - location
              - pickup
              - time
              - matchId
              - matchDetails
            properties:
              id:
                type: string
                description: The unique ID of the ride
              driverName:
                type: string
                description: The name of the driver
              seats:
                type: integer
                description: Number of available seats
              location:
                type: string
                description: Departure location
              pickup:
                type: string
                enum: ["Yes", "No"]
                description: Whether pickup stops are available
              time:
                type: string
                format: time
                description: Departure time
              matchId:
                type: string
                description: The unique ID of the match associated with the ride
              matchDetails:
                type: string
                description: Match details (e.g., "Cork City vs Dublin United - 2024-02-20")
      responses:
        '201':
          description: Ride added successfully
          schema:
            type: object
            properties:
              message:
                type: string
              ride_id:
                type: string
        '400':
          description: Missing required fields
        '500':
          description: Internal server error

  /carpool/rides:
    get:
      x-google-backend:
        address: https://microservice-carpool-180320540339.europe-west2.run.app/carpool/rides
      summary: Retrieve available rides
      description: Retrieves a list of all carpool rides offered.
      operationId: getRides
      produces:
        - application/json
      responses:
        '200':
          description: List of available rides
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                driverName:
                  type: string
                seats:
                  type: integer
                location:
                  type: string
                pickup:
                  type: string
                  enum: ["Yes", "No"]
                time:
                  type: string
                  format: time
                matchId:
                  type: string
                matchDetails:
                  type: string
        '500':
          description: Internal server error

  /carpool/request:
    post:
      x-google-backend:
        address: https://microservice-carpool-180320540339.europe-west2.run.app/carpool/request
      summary: Confirm a carpool ride request
      description: Allows a user to confirm a ride for a specific match. The ride request is automatically confirmed, the available seats are reduced, and the user's name is added to the carpool's passenger list.
      operationId: requestRide
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Ride confirmation details
          required: true
          schema:
            type: object
            required:
              - userName
              - ride_id
            properties:
              userName:
                type: string
                description: The name of the user requesting the ride
              ride_id:
                type: string
                description: The unique ID of the ride
      responses:
        '200':
          description: Ride confirmed successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Ride confirmed"
              ride_id:
                type: string
                example: "df2673b6-26ae-46b7-9dfd-630af4fdab5a"
              user:
                type: string
                example: "Jamie Roche"
        '400':
          description: Missing required fields or no available seats
          schema:
            type: object
            properties:
              error:
                type: string
                example: "No available seats"
        '404':
          description: Ride not found
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Ride not found"
        '500':
          description: Internal server error

  /carpool/cancel:
    post:
      x-google-backend:
        address: https://microservice-carpool-180320540339.europe-west2.run.app/carpool/cancel
      summary: Cancel a carpool ride
      description: Allows a driver to cancel a ride they offered.
      operationId: cancelRide
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: The ride ID to be canceled
          required: true
          schema:
            type: object
            properties:
              rideId:
                type: string
                description: The unique ID of the ride to be canceled
      responses:
        '200':
          description: Ride cancelled successfully
        '400':
          description: Missing ride ID in request
        '404':
          description: Ride not found
        '500':
          description: Internal server error
 
 # Payments Microservice Routes
  /stripe/status:
    get:
      x-google-backend:
        address: https://microservice-payments-180320540339.europe-west2.run.app/stripe/status
      summary: Check Stripe account status for a club
      description: Checks if a club has a connected Stripe Express account.
      operationId: checkStripeStatus
      produces:
        - application/json
      parameters:
        - in: query
          name: clubName
          description: The club name to check Stripe account status for.
          required: true
          type: string
      responses:
        '200':
          description: Club's Stripe account status
          schema:
            type: object
            properties:
              stripe_account_id:
                type: string
                description: The Stripe Express account ID if available, else null.
        '400':
          description: Missing or invalid query parameter.
        '500':
          description: Internal server error.

  /stripe/connect:
    post:
      x-google-backend:
        address: https://microservice-payments-180320540339.europe-west2.run.app/stripe/connect
      summary: Onboard a club with Stripe Express
      description: Creates a Stripe Express account for a club and returns an onboarding link.
      operationId: createConnectAccount
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Club details for Stripe Express onboarding.
          required: true
          schema:
            type: object
            required:
              - clubName
              - email
            properties:
              clubName:
                type: string
                description: The name of the club.
                example: "Cobh Ramblers"
              email:
                type: string
                description: The email of the club representative.
                example: "coach@cobhramblers.ie"
      responses:
        '200':
          description: Stripe Express onboarding link created successfully.
          schema:
            type: object
            properties:
              onboarding_url:
                type: string
                description: The Stripe Express onboarding link for the club.
        '400':
          description: Missing or invalid request data.
        '500':
          description: Internal server error or Stripe API failure.

  /products/create:
    post:
      x-google-backend:
        address: https://microservice-payments-180320540339.europe-west2.run.app/products/create
      summary: Create a new product in a club's Stripe Express account
      description: |
        Creates a new product and price inside the club's own Stripe Express account. 
        If `installmentMonths` is provided, the price will be set as a recurring monthly subscription with a defined cancellation period.
      operationId: createProduct
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Product details for Stripe Express creation
          required: true
          schema:
            type: object
            properties:
              clubName:
                type: string
                description: The name of the club associated with this product.
              ageGroup:
                type: string
                description: The age group of the team listing the product.
              division:
                type: string
                description: The division of the team listing the product.
              products:
                type: array
                items:
                  type: object
                  required:
                    - name
                    - price
                  properties:
                    name:
                      type: string
                      description: Name of the product.
                      example: "Membership Fee"
                    price:
                      type: number
                      format: float
                      description: Base price of the product in EUR.
                      example: 450.00
                    installmentMonths:
                      type: integer
                      description: Number of months for installment plan. If provided, the product will be created as a subscription.
                      example: 6
      responses:
        '201':
          description: Product created successfully in the club's Stripe Express account.
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Products created successfully"
              products:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: Name of the product.
                    stripe_product_id:
                      type: string
                      description: Stripe product ID.
                    stripe_price_id:
                      type: string
                      description: Stripe price ID.
                    price:
                      type: number
                      format: float
                      description: Price of the product in EUR.
                    installmentMonths:
                      type: integer
                      description: Number of months for installment plan (null for full payment).
                    category:
                      type: string
                      description: Category of the product.
                    isMembership:
                      type: boolean
                      description: Indicates if the product is a membership.
        '400':
          description: Missing or invalid request data.
        '500':
          description: Internal server error or Stripe API failure.

  /products/list:
    get:
      x-google-backend:
        address: https://microservice-payments-180320540339.europe-west2.run.app/products/list
      summary: Retrieve available products for a specific team inside a club
      description: Fetches all products listed for sale in a club's Stripe Express account filtered by age group and division.
      operationId: listProducts
      produces:
        - application/json
      parameters:
        - in: query
          name: clubName
          description: The name of the club whose products should be retrieved.
          required: true
          type: string
        - in: query
          name: ageGroup
          description: The age group of the team retrieving the products.
          required: true
          type: string
        - in: query
          name: division
          description: The division of the team retrieving the products.
          required: true
          type: string
      responses:
        '200':
          description: List of available products for the specific team inside the club.
          schema:
            type: object
            properties:
              products:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: Unique product ID from Firestore.
                    name:
                      type: string
                      description: Name of the product.
                    price:
                      type: number
                      format: float
                      description: Base price of the product in EUR.
                    installmentMonths:
                      type: integer
                      description: Number of months for installment plan (null for full payment).
                    category:
                      type: string
                      description: Category of the product.
                    isMembership:
                      type: boolean
                      description: Indicates if the product is a membership.
                    stripe_product_id:
                      type: string
                      description: The Stripe product ID linked to this product.
                    stripe_price_id:
                      type: string
                      description: The Stripe price ID linked to this product.
        '400':
          description: Missing or invalid request data.
        '500':
          description: Internal server error or Stripe API failure.

  /stripe/create-checkout-session:
    post:
      x-google-backend:
        address: https://microservice-payments-180320540339.europe-west2.run.app/stripe/create-checkout-session
      summary: Create a Stripe Checkout session
      description: |
        Creates a Stripe Checkout session for a club's Stripe Express account. 
        Handles both one-time and subscription-based payments dynamically.
      operationId: createCheckoutSession
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Checkout session details, including cart items and club information.
          required: true
          schema:
            type: object
            required:
              - clubName
              - cart
            properties:
              clubName:
                type: string
                description: The name of the club processing the payment.
                example: "Cobh Ramblers"
              ageGroup:
                type: string
                description: The age group of the club making the purchase.
              division:
                type: string
                description: The division of the team making the purchase.
              customerEmail:
                type: string
                description: The email of the customer making the purchase.
                example: "customer@email.com"
              cart:
                type: array
                items:
                  type: object
                  required:
                    - productId
                    - priceId
                    - quantity
                  properties:
                    productId:
                      type: string
                      description: The unique identifier of the product.
                      example: "prod_RpLpYtn9vcUnNU"
                    priceId:
                      type: string
                      description: The Stripe price ID linked to the product.
                      example: "price_1Qvh7b2ShZcnCRAUHmXkReB0"
                    quantity:
                      type: integer
                      description: Quantity of the product being purchased.
                      example: 2
                    installmentMonths:
                      type: integer
                      description: The number of months over which the subscription will be charged. If greater than 1, a subscription is created and automatically canceled after this duration.
                      example: 6
      responses:
        '200':
          description: Stripe Checkout session created successfully.
          schema:
            type: object
            properties:
              checkoutUrl:
                type: string
                description: The URL for Stripe-hosted Checkout.
                example: "https://checkout.stripe.com/c/pay/cs_test_a1G..."
        '400':
          description: Missing or invalid request data.
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Club name and cart items are required."
        '500':
          description: Internal server error or Stripe API failure.
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Internal server error"

  /stripe/webhook:
    post:
      x-google-backend:
        address: https://microservice-payments-180320540339.europe-west2.run.app/stripe/webhook
      summary: Stripe webhook for processing payments
      description: Handles Stripe webhook events such as successful payments.
      operationId: stripeWebhook
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: Stripe-Signature
          description: Stripe's signature for verifying webhook authenticity.
          required: true
          type: string
      responses:
        '200':
          description: Webhook received and processed successfully.
        '400':
          description: Invalid webhook signature or request payload.
        '500':
          description: Internal server error.

  /transactions/list:
    get:
      x-google-backend:
        address: https://microservice-payments-180320540339.europe-west2.run.app/transactions/list
      summary: Retrieve a user's transaction history
      description: Fetches a list of completed and pending transactions for a user based on their email. Each transaction includes itemized details of purchased products.
      operationId: listTransactions
      produces:
        - application/json
      parameters:
        - in: query
          name: email
          description: The email of the user whose transactions should be retrieved.
          required: true
          type: string
      responses:
        '200':
          description: List of transactions retrieved successfully.
          schema:
            type: object
            properties:
              transactions:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: Unique transaction ID.
                    amount:
                      type: number
                      format: float
                      description: Transaction amount in EUR.
                      example: 50.00
                    currency:
                      type: string
                      description: Currency of the transaction.
                      example: "eur"
                    status:
                      type: string
                      description: Payment status.
                      example: "completed"
                    club:
                      type: string
                      description: The club where the transaction was made.
                      example: "Cobh Ramblers"
                    ageGroup:
                      type: string
                      description: Age group related to the transaction.
                      example: "U16"
                    division:
                      type: string
                      description: Division related to the transaction.
                      example: "Premier"
                    timestamp:
                      type: string
                      format: date-time
                      description: Timestamp when the transaction was recorded.
                      example: "2025-02-27T12:34:56Z"
                    purchasedItems:
                      type: array
                      description: List of purchased products in the transaction.
                      items:
                        type: object
                        properties:
                          productId:
                            type: string
                            description: Stripe price ID of the product.
                            example: "price_ABC123"
                          productName:
                            type: string
                            description: Name of the purchased product.
                            example: "Season Membership"
                          category:
                            type: string
                            description: Category of the product.
                            enum:
                              - membership
                              - merchandise
                              - training
                              - match
                              - other
                            example: "membership"
                          quantity:
                            type: integer
                            description: Quantity of the product purchased.
                            example: 1
                          installmentMonths:
                            type: integer
                            description: Number of months for installment plan. If omitted, it is a one-time payment.
                            example: 6
                          totalPrice:
                            type: number
                            format: float
                            description: Total price paid for this product.
                            example: 50.00
        '400':
          description: Missing or invalid query parameter.
          schema:
            type: object
            properties:
              error:
                type: string
                example: "User email is required."
        '500':
          description: Internal server error.
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Internal server error."

  /stripe/login-link:
    post:
      x-google-backend:
        address: https://microservice-payments-180320540339.europe-west2.run.app/stripe/login-link
      summary: Generate a Stripe Express Dashboard login link
      description: |
        Creates a one-time login link for a club's Stripe Express account, allowing administrators to access the Express Dashboard.
      operationId: createStripeLoginLink
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Club details to generate the Stripe Express login link.
          required: true
          schema:
            type: object
            required:
              - clubName
            properties:
              clubName:
                type: string
                description: The name of the club associated with the Stripe Express account.
                example: "Cobh Ramblers"
      responses:
        '200':
          description: Stripe Express login link created successfully.
          schema:
            type: object
            properties:
              url:
                type: string
                description: The one-time login URL for the Stripe Express Dashboard.
                example: "https://connect.stripe.com/express/someGeneratedLoginLink"
        '400':
          description: Missing or invalid request data.
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Club name is required"
        '404':
          description: Club not found or does not have a Stripe Express account.
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Club not found"
        '500':
          description: Internal server error or Stripe API failure.
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Internal server error"

  # AI Assistant Microservice Routes
  /query-ai:
    post:
      x-google-backend:
        address: https://microservice-ai-chatbot-180320540339.europe-west2.run.app/query-ai
      summary: Query the AI Assistant
      description: Send a message to the AI Assistant to get data-driven responses from Grassroots Football Management.
      operationId: queryAiAssistant
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Message data for the AI assistant
          required: true
          schema:
            type: object
            properties:
              message:
                type: string
                description: The user's message/question
              token:
                type: string
                description: Firebase ID token of the authenticated user
              email:
                type: string
                description: Email address of the authenticated user
      responses:
        '200':
          description: AI assistant response
          schema:
            type: object
            properties:
              reply:
                type: string
                description: AI Assistant's natural language response
        '400':
          description: Invalid request (missing required fields)
        '401':
          description: Unauthorized - Invalid Firebase token
        '403':
          description: Forbidden - Email mismatch (token does not match provided email)
        '500':
          description: Internal server error
